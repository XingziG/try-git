package codeProblem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

// 第二题superstack，让你自己设计pop，push，increment，
// 但是跟一般的pop，push不同，push完了之后，要返回push的值，pop完之后要返回栈顶元素的值，increment（n,k）需要对栈底的n个元素增加k

public class SuperStack {
	
	    public static void main(String args[] ) throws Exception {
	        ArrayList<Integer> stack = new ArrayList<>();
	        HashMap<Integer, Integer> incremental = new HashMap<>();
	        Scanner scanner = new Scanner(System.in);
	        int n = Integer.parseInt(scanner.nextLine());
	        
	        for (int i = 0; i < n; i++) {
	            
	            String[] cmd = scanner.nextLine().split(" ");
	            String op = cmd[0];
	            
	            if ("push".equalsIgnoreCase(op)) {
	                int num = Integer.parseInt(cmd[1]);
	                stack.add(num);
	                System.out.println(stack.get(stack.size() - 1));
	            } else if ("pop".equalsIgnoreCase(op)) {
	                int length = stack.size();
	                stack.remove(length - 1);
	                if (length - 2 >= 0) {
	                    incremental.put(length - 2, 
	                                    (incremental.containsKey(length - 2) ? incremental.get(length - 2) : 0) 
	                                    + (incremental.containsKey(length - 1) ? incremental.get(length - 1) : 0));
	                }
	                incremental.put(length - 1, 0);
	                if (length == 1) {
	                    System.out.println("EMPTY");
	                } else {
	                    System.out.println(stack.get(length - 1) + incremental.get(length - 2));
	                }
	                
	            } else {
	                int increPosition = Integer.parseInt(cmd[1]) - 1;
	                int increBy = Integer.parseInt(cmd[2]);
	                if (incremental.containsKey(increPosition)) {
	                    increBy += incremental.get(increPosition);
	                }
	                incremental.put(increPosition, increBy);
	                System.out.println(stack.get(stack.size() - 1) + incremental.get(stack.size() - 1));
	            }
	        }
	    }
	}
}
