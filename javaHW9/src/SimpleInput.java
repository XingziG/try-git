/**
 * @fileName SimpleInput.java
 * @author Xingzi Guo (xingzig@andrew.cmu.edu)
 * @Andrew ID: xingzig
 * @Assignment: Homework 9-1 genetic programming
 * @date Last Modified: 11/17/2014
 * @description: In this assignment, we will generate 500 GPTrees and evolve 5 generation of trees. 
 */

/* Generated by Together */

import java.io.*;
import java.util.StringTokenizer;

public class SimpleInput {
    public SimpleInput() {
        // uses standatd input
    }

    public SimpleInput(String file) throws RuntimeException {
        File details = new File(file);
        if (!details.exists())
            throw new RuntimeException(file + " does not exist.");
        else if (!details.canRead())
            throw new RuntimeException(file + " exists but is unreadable.");
        else if (!details.isFile())
            throw new RuntimeException(file + " is not a regular file.");
        else {
            try {
                setReader(new BufferedReader(new FileReader(details)));
            }
            catch (FileNotFoundException e) {
                throw new RuntimeException("Failed to open " + file + " for an unknown reason.");
            }
        }
    }

    public short nextShort() throws RuntimeException {
        return (short)nextNumber();
    }

    public int nextInt() throws RuntimeException {
        return (int)nextNumber();
    }

    public long nextLong() throws RuntimeException {
        return (long)nextNumber();
    }

    public float nextFloat() throws RuntimeException {
        return (float)nextNumber();
    }

    public double nextDouble() throws RuntimeException {
        return (double)nextNumber();
    }

    private double nextNumber() throws RuntimeException {
        Double number = null;
        do {
            String numString = null;
            try {
                numString = nextToken();
                number = new Double(numString);
            }
            catch (NumberFormatException e) {
                numString = numString.toLowerCase();
                numString = numString.replace('d', 'e');
                try {
                    number = new Double(numString);
                }
                catch (NumberFormatException ex) {
                    // failed again
                }
            }
        } while (number == null);
        return number.doubleValue();
    }

    public String nextWord() throws RuntimeException {
        return nextToken();
    }

    public boolean nextBoolean() throws RuntimeException {
        for ( ; ; ) {
            String s = nextWord();
            if (s.equalsIgnoreCase("t") || s.equalsIgnoreCase("true"))
                return true;
            else if (s.equalsIgnoreCase("f") || s.equalsIgnoreCase("false"))
                return false;
        }
    }

    public String nextLine() throws RuntimeException {
        try {
            discardLine();
            BufferedReader reader = getReader();
            String line = reader.readLine();
            //if (line == null)
            //    throw new RuntimeException("End of input.");
            return line;
        }
        catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    public void discardLine() {
        setTokenizer(new StringTokenizer(""));
    }

    public String getDelimiters() {
        return delimiters;
    }

    public void setDelimiters(String d) {
        if ((d != null) && (d.length() > 0))
            delimiters = d;
    }

    private String nextToken() throws RuntimeException {
        StringTokenizer t = getTokenizer();
        final String delimiters = getDelimiters();
        if (!t.hasMoreTokens()) {
            do {
                String line = nextLine();
                t = new StringTokenizer(line, delimiters);
                setTokenizer(t);
            } while (!t.hasMoreTokens());
        }
        return t.nextToken(delimiters);
    }

    private BufferedReader getReader() {
        return reader;
    }

    private void setReader(BufferedReader r) {
        reader = r;
    }

    private StringTokenizer getTokenizer() {
        return tokenizer;
    }

    private void setTokenizer(StringTokenizer t) {
        tokenizer = t;
    }

    private static final BufferedReader stdinReader = new BufferedReader(new InputStreamReader(System.in));
    private BufferedReader reader = stdinReader;
    private String delimiters = " ";
    private StringTokenizer tokenizer = new StringTokenizer("");
}
