/**
 * @fileName Divide.java
 * @author Xingzi Guo (xingzig@andrew.cmu.edu)
 * @Andrew ID: xingzig
 * @Assignment: Homework 9-1 genetic programming
 * @date Last Modified: 11/17/2014
 * @description: In this assignment, we will read and store a data file. We will find out how close the tree value, for each x0 value, is to the given y value in the data.  
 * 
 */
/* Generated by Together */

/** Implements "restricted division": if the divisor is within 0.0001
* of zero, numericalEval() returns 1.0.
*/
public class Divide extends Binop {
    public Divide() {}
    public Divide(Node l, Node r) {
        super(l, r);
    }
    public double eval(double[] data) {
        if (Math.abs(rChild.eval(data)) < 0.0001)
            return 1;
        else
        	return lChild.eval(data) / rChild.eval(data);
    }
    public String toString() {
        String s = new String();
        s += "(" + lChild.toString() + " / " + rChild.toString() + ")";
        return s;
    }
    public Node duplicate() {
        Divide alterEgo = new Divide();
        alterEgo.lChild = lChild.duplicate();
        alterEgo.rChild = rChild.duplicate();
        return alterEgo;
    }
}
